# Linux Command Reference Guide

## 1. Changing User Password in Linux
To change a user's password, use the `passwd` command:

```bash
[root@mylinux /]# passwd pushpender
Changing password for user pushpender.
New password:
BAD PASSWORD: The password fails the dictionary check - it is based on a dictionary word
Retype new password:
passwd: all authentication tokens updated successfully.
[root@mylinux /]#
```

**Note:** If the password does not meet security policies, a warning is displayed, but the change may still be accepted.

## 2. Creating and Managing Files in Linux
### Basic File Operations

| Command         | Description                  |
|----------------|------------------------------|
| `touch filename` | Create an empty file       |
| `vi filename`   | Open a file for editing     |
| `mkdir dirname` | Create a new directory      |

### Copying Files and Directories
Copy a file:
```bash
cp sourcefile destinationfile
```
Copy a directory (recursively):
```bash
cp -R sourcedir destinationdir
```
`-R` ensures that the directory and all its contents are copied.

## 3. Finding Files and Directories
### Using the `find` Command
Find files or directories based on name:
```bash
find . -name "filename"
```
### Using the `locate` Command
Find files faster using a pre-built index:
```bash
locate "filename"
```
**Note:** If `locate` doesn't return correct results, update its database with:
```bash
updatedb
```
(Requires the `mlocate` package)

## 4. File Permissions and Ownership
### Changing Permissions with `chmod`

| Command            | Description                                   |
|-------------------|-------------------------------------------|
| `chmod g-w filename`  | Remove write permission from group     |
| `chmod a-x filename`  | Remove execute permission from all users |
| `chmod u-w filename`  | Remove write permission from owner    |
| `chmod u+rw filename` | Add read and write permission for the owner |

### Changing Ownership with `chown` and `chgrp`
Change file owner:
```bash
chown newowner filename
```
Change group ownership:
```bash
chgrp newgroup filename
```
### Setting Default Permissions with `umask`
Modify default file permissions using:
```bash
umask u+rw,g+r,o-rwx
```

## 5. `tee` Command
The `tee` command allows you to display output while also writing it to a file.
```bash
echo "puspen is best" | tee -a push.txt
```
`-a` appends to the file instead of overwriting it.

## 6. Network Configuration Files
### Checking Network Configuration
View network configuration order:
```bash
cat /etc/nsswitch.conf | more
```
View local hostname mappings:
```bash
more /etc/hosts
```
View DNS server configuration:
```bash
more /etc/resolv.conf
```
Example output:
```nginx
# Generated by NetworkManager
nameserver 194.168.4.100
nameserver 194.168.8.100
```
### Checking Network Traffic
View routing table:
```bash
netstat -rnv
```
Example output:
```nginx
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         192.168.0.1     0.0.0.0         UG        0 0          0 enp0s3
192.168.0.0     0.0.0.0         255.255.255.0   U         0 0          0 enp0s3
```
### Capturing Network Traffic
Use `tcpdump` to monitor network packets:
```bash
tcpdump -i enp0s3
```
### Checking Network Interface Details
```bash
ethtool enp0s3
```

## 7. Network Management Utilities
### Network Configuration Methods (RHEL 8/9)

| Method                | Command                    |
|----------------------|--------------------------|
| Text-based UI       | `nmtui`                  |
| CLI-based           | `nmcli`                   |
| GUI-based           | `nm-connection-editor`    |
| GNOME settings      | GUI                        |

## 8. `ss` Command for Socket Statistics
The `ss` command provides information about network connections.

| Command       | Description                        |
|-------------|--------------------------------|
| `ss -t`    | Show active TCP connections     |
| `ss -u`    | Show active UDP connections     |
| `ss -x`    | Show active UNIX socket connections |
| `ss -t -l -n` | List TCP connections in numeric order |

## 9. `rsync` Command for File Synchronization
The `rsync` command is used for efficient file transfers and synchronization.

Basic usage:
```bash
rsync -avz source destination
```
- `-a`: Archive mode (preserves permissions, timestamps, etc.)
- `-v`: Verbose output
- `-z`: Compress data during transfer
